@article{Bernet1997,
abstract = {We propose a framework for ``probabilistic functional$\backslash$ntesting.'' The success of a test data set generated according to our$\backslash$nmethod guarantees a certain level of confidence into the correctness$\backslash$nof the system under test, as a function of two parameters. One is an$\backslash$nestimate of the reliability, and the other is an estimate of the risk$\backslash$nthat the vendor takes when (s)he notifies this reliability percentage$\backslash$nto the client. These results are based on the theory of ``formula$\backslash$ntesting'' developed in the article. We also present a first prototype$\backslash$nof a tool which assists test case generation according to this$\backslash$ntheory. Lastly, we illustrate our method on a small formal$\backslash$nspecification.$\backslash$n},
author = {Bernet, G. and Bouaziz, L. and Gall, P. Le},
doi = {10.1109/ICSE.1997.610255},
file = {:home/romans/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Bernet, Bouaziz, Gall - 1997 - A Theory of Probabilistic Functional Testing.pdf:pdf},
isbn = {0-89791-914-9},
issn = {0270-5257},
journal = {Proceedings of the (19th) International Conference on Software Engineering},
keywords = {formal specification,functional testing,partition testing,proba-,random testing,reliability,software testing},
title = {{A Theory of Probabilistic Functional Testing}},
year = {1997}
}
@article{Cedex1993,
abstract = {This paper is concerned with the use of statistical$\backslash$ntesting as a verification technique for complex$\backslash$nsoftware. Statistical testing involves exercising a$\backslash$nprogram with random inputs, the test profile and the$\backslash$nnumber of generated inputs being determined$\backslash$naccording to criteria based on program structure or$\backslash$nsoftware functionality. In case of complex programs,$\backslash$nthe probabilistic generation must be based on a$\backslash$nblack box analysis, the adopted criteria being$\backslash$ndefined from behavior models deduced from the$\backslash$nspecification. The proposed approach refers to a$\backslash$nhierarchical specification produced in the STATEMATE$\backslash$nenvironment. Its feasiblity is exemplified on a$\backslash$nsafety-critical module from the nuclear field, and$\backslash$nthe efficiency in revealing actual faults is$\backslash$ninvestigated through experiments involving two$\backslash$nversions of the module.},
author = {Th\'{e}venod-Fosse, P. and Waeselynck, H.},
doi = {10.1145/174146.154262},
file = {:home/romans/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Cedex - 1993 - Statemate applied to statistical software testing.pdf:pdf},
isbn = {0-89791-608-5},
issn = {01635948},
journal = {ACM SIGSOFT Software Engineering Notes},
pages = {99--109},
title = {{STATEMATE applied to statistical software testing}},
volume = {18},
year = {1993}
}
@article{Chen1996,
abstract = {We investigate the efficacy of subdomain testing and random
testing using the expected number of failures detected (the E-measure)
as a measure of effectiveness. Simple as it is, the E-measure does
provide a great deal of useful information about the fault detecting
capability of testing strategies. With the E-measure, we obtain new
characterizations of subdomain testing, including several new conditions
that determine whether subdomain testing is more or less effective than
random testing. Previously, the efficacy of subdomain testing strategies
has been analyzed using the probability of detecting at least one
failure (the P-measure) for the special case of disjoint subdomains
only. On the contrary, our analysis makes use of the E-measure and
considers also the general case in which subdomains may or may not
overlap. Furthermore, we discover important relations between the two
different measures. From these relations, we also derive corresponding
characterizations of subdomain testing in terms of the P-measure},
author = {Chen, Tsong Yueh and Yu, Yuen Tak},
doi = {10.1109/32.485221},
file = {:home/romans/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Chen, Yu - 1996 - On the expected number of failures detected by subdomain testing and random testing.pdf:pdf},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Partition testing,Random testing,Software testing,Subdomain testing},
number = {2},
pages = {109--119},
title = {{On the expected number of failures detected by subdomain testing and random testing}},
volume = {22},
year = {1996}
}
@article{David1989,
abstract = {The number of (random) patterns required for random testing of RAMs (random-access memories), when classical fault models including pattern-sensitive faults are considered is determined. Markov chains are a powerful tool for this purpose. Single faults are considered first, and the influence of different parameters is analyzed. Double faults are then considered and arguments are presented to extend the results to all multiple-coupling faults. Those results are compared to the optimal or best-known number of test patterns required when deterministic testing is considered, for the same fault models},
author = {David, R. and Fuentes, a. and Courtois, B.},
doi = {10.1109/12.24267},
file = {:home/romans/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/David, Fuentes, Courtois - 1989 - Random pattern testing versus deterministic testing of RAMs.pdf:pdf},
isbn = {0818607033},
issn = {00189340},
journal = {IEEE Transactions on Computers},
number = {5},
pages = {637--650},
title = {{Random pattern testing versus deterministic testing of RAMs}},
volume = {38},
year = {1989}
}
@article{Gaudel2011,
author = {Gaudel, Marie-claude},
file = {:home/romans/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Gaudel - 2011 - Counting for Random Testing.pdf:pdf},
keywords = {combinatorics,random walks,software testing},
pages = {1--8},
title = {{Counting for Random Testing}},
year = {2011}
}
@article{Li2005,
author = {Li, Keqin and Lee, David},
file = {:home/romans/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Li, Lee - 2005 - Fault Detection of Hierarchaical Networks with Probabilistic Testing Algorithms.pdf:pdf},
pages = {258--274},
title = {{Fault Detection of Hierarchaical Networks with Probabilistic Testing Algorithms}},
year = {2005}
}
@article{Mill1984,
abstract = {Random testing of programs has usually (but not always) been viewed as a worst case of program testing. Testing strategies that take into account the program structure are generally preferred. Path testing is an often proposed ideal for structural testing. Path testing is treated here as an instance of partition testing, where by partition testing is meant any testing scheme which forces execution of at least one test case from each subset of a partition of the input domain. Simulation results are presented which suggest that random testing may often be more cost effective than partition testing schemes. Also, results of actual random testing experiments are presented which confirm the viability of random testing as a useful validation tool.},
author = {Duran, Joe W. and Ntafos, Simeon C.},
doi = {10.1109/TSE.1984.5010257},
file = {:home/romans/Documents/Dropbox/MY Data/BTH Magistratura/PA2516 - Software Verification and Validation/Debates/Itslearning/Duran+-+An+Evaluation+of+Random+Testing.pdf:pdf;:home/romans/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Duran, Ntafos - 1984 - An Evaluation of Random Testing.pdf:pdf},
issn = {0098-5589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Partition testing,path testing,random testing,software testing experiments},
number = {4},
pages = {438--444},
title = {{An Evaluation of Random Testing}},
volume = {SE-10},
year = {1984}
}
@article{Poulding2014,
author = {Poulding, Simon and Waeselynck, Helene},
doi = {10.1109/ICST.2014.42},
file = {:home/romans/Documents/Dropbox/MY Data/BTH Magistratura/PA2516 - Software Verification and Validation/Debates/other/Adding contextual guidance to the automated search for probabilistic search profiles.pdf:pdf},
isbn = {978-1-4799-2255-0},
journal = {2014 IEEE Seventh International Conference on Software Testing, Verification and Validation},
pages = {293--302},
title = {{Adding Contextual Guidance to the Automated Search for Probabilistic Test Profiles}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6823891},
year = {2014}
}
@article{Reza2010,
abstract = {Software testing is an ultimate obstacle to the final release of software products. Software testing is also a leading cost factor in the overall construction of software products. On the one hand, model-based testing methods are new testing techniques aimed at increasing the reliability of software, and decreasing the cost by automatically generating a suite of test cases from a formal behavioral model of a system. On the other hand, the architectural specification of a system represents a gross structural and behavioral aspect of a system at the high level of abstraction. Formal architectural specifications of a system also have shown promises to detect faults during software back-end development. In this work, we discuss a hybrid testing method to generate test cases. Our proposed method combines the benefits of model-based testing with the benefits of software architecture in a unique way. A simple Client/Server system has been used to illustrate the practicality of our testing technique.},
author = {Reza, H. and Lande, S.},
doi = {10.1109/ITNG.2010.122},
file = {:home/romans/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Reza, Lande - 2010 - Model Based Testing Using Software Architecture.pdf:pdf},
isbn = {978-1-4244-6270-4},
journal = {Information Technology: New Generations (ITNG), 2010 Seventh International Conference on},
keywords = {Architectural Description Languages (ADLs),HPrTNs,Model-Based testing,Software Architecture,Software Testing,acme},
title = {{Model Based Testing Using Software Architecture}},
year = {2010}
}
@article{Rose2013,
author = {Rose, Louis M. and Poulding, Simon},
doi = {10.1109/CMSBSE.2013.6604431},
file = {:home/romans/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Rose, Poulding - 2013 - Efficient probabilistic testing of model transformations using search.pdf:pdf},
isbn = {978-1-4673-6284-9},
journal = {2013 1st International Workshop on Combining Modelling and Search-Based Software Engineering, CMSBSE 2013 - Proceedings},
pages = {16--21},
title = {{Efficient probabilistic testing of model transformations using search}},
year = {2013}
}
@article{Sadeghi2012,
author = {Sadeghi, Alireza and Mirian-Hosseinabadi, Seyed-Hassan},
doi = {10.1142/S0218194012500295},
file = {:home/romans/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sadeghi, Mirian-Hosseinabadi - 2012 - Mbtdd model based test driven development.pdf:pdf},
issn = {0218-1940},
journal = {International Journal of Software Engineering and Knowledge Engineering},
keywords = {model based testing,software quality assurance,test driven development},
number = {8},
pages = {1085--1102},
title = {{Mbtdd: Model Based Test Driven Development}},
url = {http://www.worldscientific.com/doi/abs/10.1142/S0218194012500295},
volume = {22},
year = {2012}
}
@misc{Thevenod-Fosse1991,
abstract = {The fault revealing power of different test patterns derived from
ten structural test criteria currently referred to in unit testing is
investigated. Experiments performed on four programs that are pieces of
a real-life software system from the nuclear field are reported. Three
test input generation techniques are studied: (1) deterministic choice,
(2) random selection based on an input probability distribution
determined according to the adopted structural test criterion, and (3)
random selection from a uniform distribution on the input domain.
Mutation analysis is used to assess the test set efficiency with respect
to error detection. The experimental results involve a total of 2914
mutants. They show that structural statistical testing, which exhibits
the highest mutation scores, leaving alive only six from 2816
nonequivalent mutants within short testing times, is the most efficient.
A regards unit testing of programs whose structure remains tractable,
the experiments show the adequacy of a fault removal strategy combining
statistical and deterministic test patterns},
author = {Thevenod-Fosse, P. and Waeselynck, H. and Crouzet, Y.},
booktitle = {[1991] Digest of Papers. Fault-Tolerant Computing: The Twenty-First International Symposium},
doi = {10.1109/FTCS.1991.146694},
file = {:home/romans/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Thevenod-Fosse, Waeselynck, Crouzet - 1991 - An experimental study on software structural testing deterministic versus random input gene.pdf:pdf},
isbn = {0-8186-2150-8},
issn = {07313071},
title = {{An experimental study on software structural testing: deterministic
versus random input generation}},
year = {1991}
}
