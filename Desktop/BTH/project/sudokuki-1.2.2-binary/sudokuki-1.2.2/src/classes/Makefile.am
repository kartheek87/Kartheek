JAVAROOT = $(top_builddir)/tmpjar
JAVASRCDIR = $(top_builddir)/src/classes
jarfile = $(top_builddir)/$(PACKAGE)-$(VERSION).jar
jardir = $(datadir)/sudokuki
jar_DATA = $(jarfile)

JAVA_HOME=@JAVA_HOME@
JAVAC=@JAVAC@
JAVA=@JAVA@
JAR=@JAR@
$(jarfile): $(dist_noinst_JAVA) outputresources
	$(JAR) cmf $(MANIFEST) $(JARFLAGS) $@ -C $(top_builddir)/tmpjar .

include DIST_NOINST_JAVA.include

outputresources:
	cp -R $(top_builddir)/src/resources/files/* $(top_builddir)/tmpjar/ ; \
	for dir in `find $(top_builddir)/tmpjar -name ".svn"`; do \
	  rm -rf $$dir; \
	done;

$(dist_noinst_JAVA): mkversion updateAndCheckJavaFilesList mkoutputdir manifest

mkoutputdir:
	mkdir -p $(JAVAROOT)

updateAndCheckJavaFilesList:
	rm $(JAVASRCDIR)/new_DIST_NOINST_JAVA.include; \
	line="dist_noinst_JAVA = "; \
	for next in `find $(JAVASRCDIR) -name "*.java" | sort && echo "THE_END"` ; do \
	  if test "$$next" != "THE_END"; then \
	    echo $$line" \\" >> $(JAVASRCDIR)/new_DIST_NOINST_JAVA.include; \
	    line=`echo "$$next" | sed "s/^.*src\/classes\/\(.*\)/\1 /"` ; \
	  else \
	    echo $$line >> $(JAVASRCDIR)/new_DIST_NOINST_JAVA.include; \
	  fi; \
	done; \
	if test -f $(JAVASRCDIR)/DIST_NOINST_JAVA.include; then \
          cat $(JAVASRCDIR)/DIST_NOINST_JAVA.include | grep -v EXTRA_DIST | sed "s/\ \ \\///" | sort > $(JAVASRCDIR)/4diff_DIST_NOINST_JAVA.include; \
          cat $(JAVASRCDIR)/new_DIST_NOINST_JAVA.include | grep -v EXTRA_DIST | sed "s/\ \ \\///" | sort > $(JAVASRCDIR)/4diff_new_DIST_NOINST_JAVA.include; \
          cmp -s $(JAVASRCDIR)/4diff_new_DIST_NOINST_JAVA.include $(JAVASRCDIR)/4diff_DIST_NOINST_JAVA.include; \
          RETVAL=$$?; \
          if test "$$RETVAL" = "0" ; then \
            echo ""; \
            echo "*** DIST_NOINST_JAVA.include is up-to-date"; \
            echo ""; \
          else \
            echo ""; \
            echo "*** The control file 'DIST_NOINST_JAVA.include' needs to be updated first!"; \
            echo "*** Replace it with 'new_DIST_NOINST_JAVA.include' and try again."; \
            echo ""; \
            exit 1; \
          fi; \
	fi

clean-local: rmclassfiles

rmclassfiles:
	find $(JAVAROOT) -name "*.class" -exec rm {} \;

MANIFEST=$(JAVAROOT)/MANIFEST.MF
manifest:
	echo "Manifest-Version: 1.0" > $(MANIFEST); \
	echo "Main-Class: net.jankenpoi.sudokuki.ui.Main" >> $(MANIFEST);

VERSION_DIR=$(JAVASRCDIR)/net/jankenpoi/sudokuki
VERSION_FILE=$(VERSION_DIR)/Version.java

mkversion:
	mkdir -p $(VERSION_DIR); \
	touch $(VERSION_FILE); \
	echo "/**" > $(VERSION_FILE); \
	echo " * -- DO NOT EDIT THIS FILE --" >> $(VERSION_FILE); \
	echo " * This file is generated automatically during the build process" >> $(VERSION_FILE); \
	echo " * (./configure && make) based on the standard GNU Auto-tools." >> $(VERSION_FILE); \
	echo " */" >> $(VERSION_FILE); \
	echo "package net.jankenpoi.sudokuki;" >> $(VERSION_FILE); \
	echo "" >> $(VERSION_FILE); \
	echo "public interface Version {" >> $(VERSION_FILE); \
	echo "" >> $(VERSION_FILE); \
	echo "    public String versionString = \"Sudokuki $(PACKAGE_VERSION)\";" >> $(VERSION_FILE); \
	echo "" >> $(VERSION_FILE); \
	echo "}" >> $(VERSION_FILE);

CLEANFILES = $(jarfile) $(VERSION_FILE) $(MANIFEST) new_DIST_NOINST_JAVA.include
